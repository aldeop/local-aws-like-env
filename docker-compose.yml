version: '3.9'

services:
  # ============== Load Balancer (ELB) ==============
  traefik:
    image: traefik:v2.10
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/certs:/certs
      - ./traefik/dynamic.yml:/dynamic.yml
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedByDefault=false
      - --providers.file.filename=/dynamic.yml
      - --log.level=INFO
      - --api.insecure=true # Enable dashboard on port 8080
    networks:
      - aws-network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager # Ensure Traefik runs on a manager node
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============== Nginx Web Server (New Service) ==============
  nginx:
    image: nginx:1.27
    volumes:
      - ./php/src:/var/www/html
      - ./php/nginx/default.conf:/etc/nginx/conf.d/default.conf
    labels:
      - "traefik.enable=true"
      # --- Define the service once ---
      - "traefik.http.services.php-app-service.loadbalancer.server.port=80"
      # --- Secure router (for HTTPS) ---
      - "traefik.http.routers.php-app-secure.rule=Host(`app.localhost`)"
      - "traefik.http.routers.php-app-secure.entrypoints=websecure"
      - "traefik.http.routers.php-app-secure.tls=true"
      - "traefik.http.routers.php-app-secure.service=php-app-service"
      - "traefik.http.routers.php-app-secure.middlewares=secure-headers@file"
      # --- Insecure router (for HTTP to HTTPS redirect) ---
      - "traefik.http.routers.php-app-insecure.rule=Host(`app.localhost`)"
      - "traefik.http.routers.php-app-insecure.entrypoints=web"
      - "traefik.http.routers.php-app-insecure.service=php-app-service"
      - "traefik.http.routers.php-app-insecure.middlewares=redirect-to-https@file"
    networks:
      - aws-network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager # Ensure Traefik runs on a manager node
      restart_policy:
        condition: on-failure

  # ============== PHP Application (ECS) ==============
  php-fpm:
    image: php-fpm-app:latest
    secrets:
      - db_password
    volumes:
      - ./php/src:/var/www/html
    environment:
      DB_HOST: mysql-aurora
      DB_DATABASE: app_db
      DB_USER: root
      DB_PASSWORD_FILE: /run/secrets/db_password
      AWS_ENDPOINT_URL: http://localstack:4566
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: eu-west-2
    networks:
      - aws-network
    deploy:
      mode: replicated
      replicas: 2 # Start with 2 replicas to demonstrate scaling
      restart_policy:
        condition: on-failure

  # ============== Aurora-like MySQL (RDS) ==============
  mysql-aurora:
    image: mysql:8.0
    secrets:
      - db_root_password
    volumes:
      - ./mysql/my.cnf:/etc/mysql/conf.d/aurora.cnf
      - ./mysql/init:/docker-entrypoint-initdb.d
      - mysql-data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db_root_password
      - MYSQL_DATABASE=app_db
    networks:
      - aws-network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager # Place database on a predictable node
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]

  # ============== S3 Emulation ==============

  localstack:
    image: localstack/localstack:3.5
    environment:
      - SERVICES=s3
      - DEFAULT_REGION=eu-west-2
    ports:
      - "4566:4566"
    volumes:
      - localstack_data:/var/lib/localstack
      # - /var/run/docker.sock:/var/run/docker.sock # Mount docker.sock to allow LocalStack to manage containers for services like ECS/Lambda
    networks:
      - aws-network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

volumes:
  mysql-data:
  localstack_data:

networks:
  aws-network:
    driver: overlay # Overlay network is required for swarm services
    attachable: true # Allows us to inspect the network easily

secrets:
  db_root_password:
    file: ./db_root_password.txt
  db_password:
    file: ./db_password.txt   

